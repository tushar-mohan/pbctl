#!/bin/bash

# Author: Tushar Mohan <tusharmohan@gmail.com>
# 
# usage:
#  pbctl login
#  pbctl logout
#  pbctl import <file.csv>
#  pbctl list
#  pbctl show <job-id>
#  pbctl del <job-id>
#  pbctl test
#  pbctl version

# e.g.,
#  pbctl import test/data/sample.papiex.csv
#  cat test/data/sample.papiex.csv | pbctl import -
#  hpcrun2json *.hpcrun-flat.* | pbctl import -

# Revision History
#
# 1.1.0 - Added support for import json data directly 

VERSION="1.1.0"

API_BASE_URL=${PB_APIBASE_URL:-"https://perfbrowser.perftools.org/api/1.0"}
USERINFO_URL="${API_BASE_URL}/userinfo/"
JOBSLIST_URL="${API_BASE_URL}/jobs/"
POST_PERFDATA_URL="${API_BASE_URL}/perfdata/"
VERIFY_AUTH_URL="${API_BASE_URL}/verify_auth/"
CONFIG_DIR="${HOME}/.perfbrowser"
TOKEN_PATH="${CONFIG_DIR}/.authtoken"


script_dir=$(dirname $0)
verbose=0

function GET_JOB_URL() {
    echo "${API_BASE_URL}/jobs/$1/"
}
function GET_PERFDATA_URL() {
    echo "${API_BASE_URL}/$1/perfdata/"
}

function die() {
    echo $1 >&2
    exit $2 
}

print_version()
{
  echo $VERSION
}

print_usage ()
{
    exe=$(basename $0)
    echo "Usage: 
    $exe [-hv] COMMAND
        -h, --help            Print this usage message.
        -v, --verbose         Print info messages

     COMMAND is one of the following:

        del JOB               Delete JOB
        import [FILE|-] [JOB] Import CSV/JSON data from FILE or stdin (-). If a JOB is 
                              specified, then the data will be appended into an 
                              existing job, If no FILE is provided, data will be
                              read from stdin (-). If PBCTL_DUMP_JSON is set,
                              then pbctl will dump JSON data to stdout and exit.
        list                  List all jobs
        login                 Login to perfbrowser cloud service. Save credentials on disk
        logout                Logout of perfbrowser cloud service. Remove credentials stored on disk
        show JOB              Dump JOB details
        test                  Run tests
        version               Print program version and exit
" 
}


function login() {
    if [ -s "$TOKEN_PATH" ]; then
        if ! curl -s -f -u $(cat "$TOKEN_PATH"): "$VERIFY_AUTH_URL" > /dev/null; then
            rm -f "$TOKEN_PATH"
            die "Invalid credentials" 2
        else
            [ "$1" != "quiet" ] && echo "Login successful (token verified)"
        fi
    else
        if [ "$PB_USER" != "" ]; then
            username="$PB_USER"
        else
            echo -n "Username or email: "
            read username
        fi
        if [ "$PB_PASSWD" != "" ]; then
            password="$PB_PASSWD"
        else
            echo -n "Password: "
            read -s password
            echo
        fi
        umask 077
        mkdir -p "$CONFIG_DIR"
        curl -s -f -u "${username}:${password}" "$USERINFO_URL" | grep -w token| sed 's/"//g'| awk '{print $2}' > "$TOKEN_PATH"
        if [ ! -s "${TOKEN_PATH}" ]; then
            die "Invalid credentials" 2
        else
            [ "$1" != "quiet" ] && echo "Login successful (token saved)"
        fi
    fi    
}

function jobsList() {
    login quiet
    curl -s -f -u $(cat "$TOKEN_PATH"): "$JOBSLIST_URL"
}

function jobDetail() {
    login quiet
    if ! curl -s -f -u $(cat "$TOKEN_PATH"): $(GET_PERFDATA_URL $1); then
        die "Error retrieving job $1"
    fi
}

function logOut() {
    rm -f "$TOKEN_PATH" && echo "logged out"
}

function jobDelete() {
    login quiet
    if curl -s -f -X DELETE -u $(cat "$TOKEN_PATH"): $(GET_JOB_URL $1); then
        echo "Job $1 successfully deleted"
    else
        die "Could not delete job $1" 4
    fi
}


function import() {
    declare -a inputLines
    readInput "$1"
    if [[ "${inputLines[0]}" == *,* ]]; then
        precs=$(csv2json)
    else
        precs=$(IFS=$'\n'; echo "${inputLines[*]}")
    fi
    if [ "$2" == "" ]; then
        data="{ \"precs\": $precs }"
    else
        data="{ \"precs\": ${precs}, \"job_id\": $2  }"
    fi
    if [ "$PBCTL_DUMP_JSON" != "" ]; then
        echo -e -n "$data"
        exit 0
    fi
    jsonfile=$(mktemp /tmp/pbctl.json.XXXXXX)
    echo -e -n "$data" > $jsonfile
    if curl -f --silent --show-error -X POST -H "Content-Type: application/json" -u $(cat "$TOKEN_PATH"): -d @$jsonfile $POST_PERFDATA_URL; then
        echo "import of $1 successful"
    else
        die "import of $1 failed"
    fi
    rm -f $jsonfile
}

# this function will read an input file or stdin
# and populate an array called 'inputLines'
function readInput() {
    [ -z "$1" ] && echo "No input specified" >&2 && exit 1
    input="$1"
    if [ "$input" != "-" ]; then
        [ ! -s "$input" ] && echo "Could not find $input" >&2 && return
    fi
    if [ "$input" == "-" ]; then 
        readarray -t inputLines
    else
        readarray -t inputLines < "$input"
    fi
    return
}

# csv2json assumes an array inputLines is populated with input data
# json output sent to stdout
function csv2json() {
    header_line="${inputLines[0]}"
    a=0
    headers=`echo $header_line | awk -F, {'print NF'}`
    while [ $a -lt $headers ]
    do
            head_array[$a]=$(echo $header_line | awk -v x=$(($a + 1)) -F"," '{print $x}')
            a=$(($a+1))
    done
     
    c=0
    numlines="${#inputLines[@]}"
    echo "input contains $numlines lines (including header)" >&2
    echo "["
    for dataline in "${inputLines[@]}"; do
            if [ $c -ne 0 ]; then
                    d=0
                    echo "    {"
                    IFS=',' read -r -a data_array <<< "$dataline"
                    while [ $d -lt $headers ]
                    do
                            val=${data_array[$d]}
                            # enclose in string if it's not a number
                            if ! [[ $val =~ ^[0-9]*.?[0-9]+$ ]]; then
                                val=\"$val\"
                            fi
                            echo -n "        "\"${head_array[$d]}\"": "$val
                            if [ $d -ne $(($headers-1)) ]; then
                                echo ","
                            else
                                echo
                            fi
                            d=$(($d+1))
                    done
                    if [ $c -eq $(($numlines-1)) ]; then
                            echo "    }"
                    else
                            echo "    },"
                    fi
            fi
            c=$(($c+1))
    done
    echo "]"
}

while [ $# -ge 1 ]; do
    case "$1" in
        --)
             # No more options left.
             shift
             break
             ;;
        -h|--help)
             print_usage
             exit 0
             ;;
        import)
             import_file=${2:-"-"}
             job="$3"
             [ $verbose -eq 0 ] || echo "command: import file $import_file"
             shift
             shift
             ;;
        show)
             show="$2"
             [ $verbose -eq 0 ] || echo "job: $job"
             shift
             ;;
        list)
             list=1
             [ $verbose -eq 0 ] || echo "command: jobs list"
             ;;
        login)
             login
             ;;
        logout)
             logOut
             ;;
        del)
             delete_job="$2"
             [ $verbose -eq 0 ] || echo "command: delete job $delete_job"
             shift
             ;;
        test)
             exec ${script_dir}/test/run
             ;;
        -v|--verbose)
             verbose=1
             ;;
        version)
             print_version && exit 0
             ;;
        *)
             echo "Could not recognize option \"$1\""
             print_usage && exit 1
             ;;
      esac
      shift
done

[ $verbose -eq 1 ] && echo "api base url: $API_BASE_URL"
if [ "$list" == "1" ]; then
    jobsList
elif [ "$delete_job" != "" ]; then
    jobDelete $delete_job
elif [ "$import_file" != "" ]; then
    import $import_file $job
elif [ "$show" != "" ]; then
    jobDetail $show
fi
